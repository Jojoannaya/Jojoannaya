-- ecommerce marketing campaign performance analysis
-- calculated bounce rate, conversion rate (trend analysis), traffic source analysis, conversion funnel analysis, test analysis, etc.

/* find the biggest driver of business -- gsearch: paid marketing source
 Monthly trends for gsearch sessions and orders to showcase the growth */

select
  year(website_sessions.created_at) as yr,
  month(website_sessions.created_at) as mo,
  count(distinct website_sessions.website_session_id) as sessions,
  count(distinct orders.order_id) as orders,
  count(distinct orders.order_id) / count(distinct website_sessions.website_session_id) as conv_rate
from website_sessions
left join orders
  on orders.website_session_id = website_sessions.website_session_id
where website_sessions.created_at < '2012-11-27'
  and website_sessions.utm_source = 'gsearch'
group by 1,2;

/* 
2. Monthly trend for Gsearch, slitting out gseach's nonbrand campaigns separate to see if brand is picking up at all. */
select
  year(website_sessions.created_at) as yr,
  month(website_sessions.created_at) as mo,
  count(distinct case when utm_campaign = 'nonbrand' then website_sessions.website_session_id else null end) as nonbrand_sessions,
  count(distinct case when utm_campaign = 'nonbrand' then orders.order_id else null end) as nonbrand_orders,
  count(distinct case when utm_campaign = 'brand' then website_sessions.website_session_id else null end) as brand_sessions,
  count(distinct case when utm_campaign = 'brand' then orders.order_id else null end) as brand_orders
from website_sessions
left join orders
  on orders.website_session_id = website_sessions.website_session_id
where website_sessions.created_at < '2012-11-27'
  and website_sessions.utm_source = 'gsearch'
group by 1,2;

/*
3.Pull monthly sessions and orders on nonbrand split by device type to show the traffic sources. */
-- can also using case when to create pivot table

select
  year(website_sessions.created_at) as yr,
  month(website_sessions.created_at) as mo,
  device_type,
  count(distinct website_sessions.website_session_id) as sessions,
  count(distinct orders.order_id) as orders
from website_sessions
left join orders
  on website_sessions.website_session_id = orders.website_session_id
where utm_source = 'gsearch' 
  and utm_campaign = 'nonbrand'
  and website_sessions.created_at < '2012-11-27'
group by 1,2,3;

/* 
4. Pull monthly trends for gsearch and monthly trends for each of other channels to show the large
% of traffic from gsearch?
*/
-- figure out how many traffic source are there
-- cannot simply group by utm_source, because when utm_source is null, there are two types of source
-- so use case when to specificly group

select
  year(website_sessions.created_at) as yr,
  month(website_sessions.created_at) as mo,
  count(distinct case when utm_source = 'gsearch' then website_sessions.website_session_id else null end) as gsearch_paid_sessions,
  count(distinct case when utm_source = 'bsearch' then website_sessions.website_session_id else null end) as bsearch_paid_sessions,
  count(distinct case when utm_source is null and http_referer is not null then website_sessions.website_session_id else null end) as organic_search_sessions,
  count(distinct case when utm_source is null and http_referer is null then website_sessions.website_session_id else null end) as direct_type_in_sessions
from website_sessions
where website_sessions.created_at < '2012-11-27'
group by 1,2;

/* 
Pull session to order conversion rates, by month to Tell the story of website performance improvements over the first 8 months.*/

select
  year(website_sessions.created_at) as yr,
  month(website_sessions.created_at) as mo,
  count(distinct website_sessions.website_session_id) as sessions,
  count(distinct orders.order_id) as orders,
  count(distinct orders.order_id) / count(distinct website_sessions.website_session_id) as conv_rate
from website_sessions
left join orders
  on orders.website_session_id = website_sessions.website_session_id
where website_sessions.created_at < '2012-11-27'
group by 1,2;

/* 
6. estimate the revenue of the gsearch tested lander page earned, looking at the increase in cvr from the test (June 19 - July 28)
, and use nonbrand sessions and revenue since then to calculate incremental value
*/

-- compare the different landing page conversion rate

-- find out when the lander test was set online
select
  min(website_pageview_id) as first_test_pv
from website_pageviews
where pageview_url = '/lander-1';

-- find out the lander page of each session
drop table first_test_pageviews;
create temporary table first_test_pageviews
select 
  website_pageviews.website_session_id,
  min(website_pageviews.website_pageview_id) as min_pageview_id
from website_pageviews
inner join website_sessions
  on website_sessions.website_session_id = website_pageviews.website_session_id
where website_sessions.created_at < '2012-07-28'
  and website_pageviews.website_pageview_id >= 23504
  and utm_source = 'gsearch'
  and utm_campaign = 'nonbrand'
group by website_pageviews.website_session_id;


-- select only /home and /lander-1 to compare

create temporary table nonbrand_test_sessions_with_landing_pages
select 
  first_test_pageviews.website_session_id,
  first_test_pageviews.min_pageview_id,
  website_pageviews.pageview_url as landing_page
from first_test_pageviews
left join website_pageviews
on first_test_pageviews.min_pageview_id = website_pageviews.website_pageview_id
where website_pageviews.pageview_url in ('/home', '/lander-1');

-- bring in orders table to see how many orders each lander page bring
create temporary table nonbrand_test_sessions_w_orders
select nonbrand_test_sessions_with_landing_pages.website_session_id,
  nonbrand_test_sessions_with_landing_pages.landing_page,
  orders.order_id
from nonbrand_test_sessions_with_landing_pages
left join orders
  on nonbrand_test_sessions_with_landing_pages.website_session_id = orders.website_session_id;

-- conversion rate of each lander page from June 19 - July 28
select
  landing_page,
  count(website_session_id) as sessions,
  count(order_id) as orders,
  count(order_id)/count(website_session_id) as conv_rate
from nonbrand_test_sessions_w_orders
group by landing_page;

-- finding the most recent pageview for gsearch nonbrand where the traffic was sent to home
-- after the most recent pageview from home, all the session was brought by lander-1
select
  max(website_sessions.website_session_id) as most_recent_gsearch_nonbrand_home_pageview
from website_sessions
left join website_pageviews
  on website_pageviews.website_session_id = website_sessions.website_session_id
where utm_source = 'gsearch'
  and utm_campaign = 'nonbrand'
  and pageview_url = '/home'
  and website_sessions.created_at < '2012-11-27';

-- 17145


-- find out how many website sessions after the homepage was eliminated
select 
  count(website_session_id) as sessions_since_test
from website_sessions
where created_at < '2012-11-27'
  and website_session_id > 17145
  and utm_source = 'gsearch'
  and utm_campaign = 'nonbrand';

-- calculate incremental orders
-- 22972
-- 0.0087 * 22972 =202 incremental orders since 7/29

/* 
7. Full conversion funnel from each of the two landing pages to orders.
*/

-- how many sessions go through each step of the conversion funnels

drop table session_level_made_it_flagged;
create temporary table session_level_made_it_flagged
select
  website_session_id,
  max(homepage) as saw_homepage,
  max(custom_lander) as saw_custom_lander,
  max(product_page) as product_made_it,
  max(mrfuzzy_page) as mrfuzzy_made_it,
  max(cart_page) as cart_made_it,
  max(shipping_page) as shipping_made_it,
  max(billing_page) as billing_made_it,
  max(thankyou_page) as thankyou_made_it
from (select 
          website_sessions.website_session_id,
          website_pageviews.pageview_url,
          case when pageview_url = '/home' then 1 else 0 end as homepage,
          case when pageview_url = '/lander-1' then 1 else 0 end as custom_lander,
          case when pageview_url = '/products' then 1 else 0 end as product_page,
          case when pageview_url = '/the-original-mr-fuzzy' then 1 else 0 end as mrfuzzy_page,
          case when pageview_url = '/cart' then 1 else 0 end as cart_page,
          case when pageview_url = '/shipping' then 1 else 0 end as shipping_page,
          case when pageview_url = '/billing' then 1 else 0 end as billing_page,
          case when pageview_url = '/thank-you-for-you-order' then 1 else 0 end as thankyou_page
      from website_sessions
      left join website_pageviews
          on website_sessions.website_session_id = website_pageviews.website_session_id
      where website_sessions.utm_source = 'gsearch'
          and website_sessions.utm_campaign = 'nonbrand'
          and website_sessions.created_at < '2012-07-28'
          and website_sessions.created_at > '2012-06-19'
      order by website_sessions.website_session_id, website_pageviews.created_at) as pageview_level
      group by 1;

-- split rest conversion funnels into two segments
-- case statement --- build pivot table --- group by case statement

select
  case when saw_homepage = 1 then 'saw_homepage'
  when saw_custom_lander = 1 then 'saw_custome_lander'
  else 'uh oh... check logic'
end as segment,

  count(distinct website_session_id) as sessions,
  count(distinct case when product_made_it = 1 then website_session_id else null end) as to_products,
  count(distinct case when mrfuzzy_made_it = 1 then website_session_id else null end) as to_mrfuzzy,
  count(distinct case when cart_made_it = 1 then website_session_id else null end) as to_cart,
  count(distinct case when shipping_made_it = 1 then website_session_id else null end) as to_shipping,
  count(distinct case when billing_made_it = 1 then website_session_id else null end) as to_billing,
  count(distinct case when thankyou_made_it = 1 then website_session_id else null end) as to_thankyou
from session_level_made_it_flagged

group by 1;

-- calculate click rate

select
  case when saw_homepage = 1 then 'saw_homepage'
  when saw_custom_lander = 1 then 'saw_custome_lander'
  else 'uh oh... check logic'
end as segment,

  count(distinct case when product_made_it = 1 then website_session_id else null end) / count(distinct website_session_id) as lander_clck_rt,
  count(distinct case when mrfuzzy_made_it = 1 then website_session_id else null end) / count(distinct case when product_made_it = 1 then website_session_id else null end ) as product_click_rt,
  count(distinct case when cart_made_it = 1 then website_session_id else null end) / count(distinct case when mrfuzzy_made_it = 1 then website_session_id else null end) as mrfuzzy_click_rt,
  count(distinct case when shipping_made_it = 1 then website_session_id else null end) / count(distinct case when cart_made_it = 1 then website_session_id else null end) as cart_click_rt,
  count(distinct case when billing_made_it = 1 then website_session_id else null end) / count(distinct case when shipping_made_it = 1 then website_session_id else null end) as shipping_click_rt,
  count(distinct case when thankyou_made_it = 1 then website_session_id else null end) / count(distinct case when billing_made_it = 1 then website_session_id else null end) as thankyou_click_rt
from session_level_made_it_flagged
group by 1;

/* 
8. quantify the impact of billing test, analyze the lift generated from the test (sep 10 - nov 10) in terms of revenue per billing page session
pull the number of billing page sessions for the past month to understand monthly impact */

select
  billing_version_seen,
  count(distinct website_session_id) as sessions,
  count(distinct order_id) as orders,
  count(distinct order_id)/count(distinct website_session_id) as conv_rate,
  sum(price_usd)/count(distinct website_session_id) as revenue_per_billing_page_seen
from(
      select 
          website_pageviews.website_session_id,
          website_pageviews.pageview_url as billing_version_seen,
          orders.order_id,
          orders.price_usd
          from website_pageviews
      left join orders
          on website_pageviews.website_session_id = orders.website_session_id
      where website_pageviews.pageview_url in ('/billing', '/billing-2')
          and website_pageviews.created_at > '2012-09-10'
          and website_pageviews.created_at < '2012-11-10') as billing_pageviews_and_order_data
      group by 1 ;

-- lift $8.51 per billing page view

select 
  count(website_session_id) as billing_session_past_month
from website_pageviews
where pageview_url in ('/billing','/billing-2')
  and created_at between '2012-10-27' and '2012-11-27'

-- $1193 * 8.51 = $10160
